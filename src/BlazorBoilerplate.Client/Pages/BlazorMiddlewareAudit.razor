@page "/blazor_middlware_audit"

@inject HttpClient Http
@inject IMatToaster matToaster

<h1>Blazor / .NET Core Middleware Audit Log (In Progress)</h1>
<p>
    This is an example of the .NET Core Middleware that logs all API calls in the database. We filtor out "api/authorize/" calls for Login / Logout / GetUser to keep it somewhat reasonable.
    This code is can be easily modified to fit your needs. I think this is a great feature for you to track your useer interaction and errors. For instance if Bob logged in and filled out a form with
    erroneous data it will log the error as well as the request data. Then you could easily look through this audit log and recreate his actions. Then you could add additional validation or handle the
    input in an appropriate manner.
</p>
<p>
    <MatButton Link="https://www.paypal.me/enkodellc"><i class="fa fa-cc-paypal"></i> Donate</MatButton>&nbsp;&nbsp; - If you use the repo please donate.  Other devs are charging $30+ to download their code with similar functionality.
</p>

@if (apiResponses == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Loading ApI Log Data</label>
    </LoadingBackground>
}
else
{
    <MatTable Items="@apiResponses" Class="mat-elevation-z5">
        <MatTableHeader>
            <th>Date / Time</th>
            <th>Http Code</th>
            <th>User</th>
            <th>Method</th>
            <th>Path</th>
            <th>Response Time</th>
        </MatTableHeader>
        <MatTableRow>
            <td></td>
            <td>@context.StatusCode</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </MatTableRow>
    </MatTable>
}


@code {
    ApiResponseDto[] apiResponses = new ApiResponseDto[] { };

    protected override async Task OnInitializedAsync()
    {
        //ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>("api//WeatherForecasts");

        //if (apiResponse.StatusCode == 200)
        //{
        //    matToaster.Add(apiResponse.Message, MatToastType.Success, "Weather Forecast Retrieved");
        //    forecasts = Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherForecast[]>(apiResponse.Result.ToString());
        //}
        //else
        //{
        //    matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Weather Forecast Retrieval Failed");
        //}
    }


}
